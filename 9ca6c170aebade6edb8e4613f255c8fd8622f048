{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "e5da0790_f1c2dcfd",
        "filename": "client/usb_libusb.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1033,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-01-12T17:25:57Z",
      "side": 1,
      "message": "(and remember what we\u0027ve talked about before with long comments... \"why am i writing this comment?\" \"because the code is weird and non-obvious\" \"does the code _have_ to be weird and non-obvious, or can we rewrite it so the _code_ tells us what\u0027s going on instead?\". that\u0027s another advantage of the `if (\u003cno usb\u003e) return;` approach. obviously in an ideal world libusb would have a \"no usb\" error code -- and that\u0027s the upstream bug i was talking in yesterday\u0027s meeting -- but that doesn\u0027t exist, so isn\u0027t an option.)",
      "range": {
        "startLine": 1031,
        "startChar": 20,
        "endLine": 1033,
        "endChar": 78
      },
      "revId": "9ca6c170aebade6edb8e4613f255c8fd8622f048",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "df28bdea_6196078d",
        "filename": "client/usb_libusb.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1034,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-01-12T16:15:34Z",
      "side": 1,
      "message": "don\u0027t write this kind of error messages --- this is a classic 1990s-era Windows of bad message[1], where you\u0027re _guessing_ something rather than _checking_ something. this is one reason why i suggested the alternative \"check for the directory and don\u0027t even call libusb_init() if it\u0027s not there\", since to provide a decent error here (given that libusb_init() seems to just return \"unknown failure\", judging by what we\u0027ve seen on the bug), we end up needing to do that anyway...\n\ni\u0027m also unconvinced that we want to ignore _all_ libusb failures?\n\n____\n1. at their worst, MS would list _multiple_ things. but anything in an error that\u0027s just a guess is bad, especially when it\u0027s something that the computer can check more easily than a human.",
      "revId": "9ca6c170aebade6edb8e4613f255c8fd8622f048",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "423d9c43_8093455e",
        "filename": "client/usb_libusb.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1034,
      "author": {
        "id": 1579231
      },
      "writtenOn": "2024-01-12T16:53:52Z",
      "side": 1,
      "message": "I feel that this strategy is better because: When we upgrade to a contemporary version of libusb (ref: recent activity that supports\nhotplug behavior https://github.com/libusb/libusb/pull/1406, ultimately resulting in us standardizing on libusb as the sole back-end stack) we can just continue to use the standard libusb interface (libusb_init() in this case) to surface/handle errors (without duplicating the logic in application code). That way there\u0027s one place (libusb) that checks for such preconditions. Conversely, if we try to adjust for downstream (libusb errors) by doing those check(s) ourselves, it might potentially cause more duplicated work. For e.g today it\u0027s just the absence of /dev/bus/usb and /sys/bus/usb, however this could (potentially) change.\nI\u0027m unsure why you feel that I\u0027m \"guessing\" (since the verbiage is \"will not have\"). Clearly, the absence of these mounts is the reason why the folks who commented on the bug encountered the failure.\nWhile I agree that LIBUSB_ERROR_OTHER is a poor excuse for an error string, I feel that the `missing /dev/bus/usb` entries?` snippet might serve to save the end-user\u0027s time (doing a search for `failed to initialize libusb: LIBUSB_ERROR_OTHER\u0027, or an internal moma search yielding this bug). This is not incorrect, and yields more (relevant) information than the alternative (which is nil).\nAssuming you have any other strong reservations about the text of the string, what would you propose instead?",
      "parentUuid": "df28bdea_6196078d",
      "revId": "9ca6c170aebade6edb8e4613f255c8fd8622f048",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8e9b21f4_e91563d3",
        "filename": "client/usb_libusb.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1034,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-01-12T17:02:35Z",
      "side": 1,
      "message": "\u003e I feel that this strategy is better because: When we upgrade to a contemporary version of libusb (ref: recent activity that supports\nhotplug behavior https://github.com/libusb/libusb/pull/1406, ultimately resulting in us standardizing on libusb as the sole back-end stack) we can just continue to use the standard libusb interface (libusb_init() in this case) to surface/handle errors (without duplicating the logic in application code).\n\ni have no idea what you\u0027re talking about... i\u0027m saying that we should have:\n```\nif (!exists(\"\u003cdirectory\u003e\")) {\n  LOG(WARNING) \u003c\u003c \"not enabling USB because \u003cdirectory\u003e missing\";\n  return;\n}\n...rest of this function stays the same, calling libusb_init()\n```\n(like i said on the chat yesterday.)\n\n_one_ day we might change the FATAL, but right now -- while we don\u0027t know what problems we might have -- failing hard and visibly is a feature, because it means we get bug reports, which is the reason why we made libusb the default.\n\n\u003e I\u0027m unsure why you feel that I\u0027m \"guessing\" (since the verbiage is \"will not have\"). Clearly, the absence of these mounts is the reason why the folks who commented on the bug encountered the failure.\n\nthere\u0027s literally a `?` in your current error message, admitting that it\u0027s just a guess. any time you have a question mark in an error message, you should stop and think \"can the _machine_ answer that question instead?\". otherwise every time that error message appears, you\u0027re wasting some human\u0027s time, and probably your own too as you round-trip the bug saying \"did you check that?\".",
      "parentUuid": "423d9c43_8093455e",
      "revId": "9ca6c170aebade6edb8e4613f255c8fd8622f048",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}