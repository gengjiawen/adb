{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "004b3918_e2db51ac",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 14,
      "author": {
        "id": 1579231
      },
      "writtenOn": "2024-03-16T15:39:10Z",
      "side": 1,
      "message": "Please include the specific location (e.g device/google/zuma/device.mk). This will help cursory test this CL.",
      "range": {
        "startLine": 14,
        "startChar": 56,
        "endLine": 14,
        "endChar": 64
      },
      "revId": "379b9d8e74e4b993ae6aa0c19591102c239e7901",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4dea8f2b_170f2108",
        "filename": "Android.bp",
        "patchSetId": 5
      },
      "lineNbr": 217,
      "author": {
        "id": 1579231
      },
      "writtenOn": "2024-03-16T15:39:10Z",
      "side": 1,
      "message": "Since we will have co-existence of /system/bin/adbd and /apex/com.android.adbd/bin \n   - do we need to consider whether these binaries can/need to be consistent with each other (although `ln -s` would be impossible given the sequence)?\n   - is this only applicable to user-debug and eng builds?",
      "range": {
        "startLine": 216,
        "startChar": 8,
        "endLine": 217,
        "endChar": 26
      },
      "revId": "379b9d8e74e4b993ae6aa0c19591102c239e7901",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3e70e8be_382654a6",
        "filename": "Android.bp",
        "patchSetId": 5
      },
      "lineNbr": 217,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-03-18T15:19:46Z",
      "side": 1,
      "message": "yeah, that would be my worry here too. \"how do we prevent this from happening on real builds?\"\n\n+jiyong in case there\u0027s already a way to recognize in the build system those builds that are still in early bringup without apexd... (maybe there shouldn\u0027t be an _enable_ for this, but a _disable_ for something else?)\n\nor i susppose we could just have a CTS test to check you haven\u0027t accidentally done this.\n\nbut a \"i\u0027m in bringup\" BoardConfig.mk option sounds generally useful?",
      "parentUuid": "4dea8f2b_170f2108",
      "range": {
        "startLine": 216,
        "startChar": 8,
        "endLine": 217,
        "endChar": 26
      },
      "revId": "379b9d8e74e4b993ae6aa0c19591102c239e7901",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "71f03d87_4f7e8fa7",
        "filename": "Android.bp",
        "patchSetId": 5
      },
      "lineNbr": 217,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2024-03-20T06:57:14Z",
      "side": 1,
      "message": "\u003e those builds that are still in early bringup without apexd\n\nI am guessing you are talking about flatten APEX where APEXes are flattened out directly on /system/apex and therefore no apexd is required/running. Flattened APEX was deprecated starting from V.",
      "parentUuid": "3e70e8be_382654a6",
      "range": {
        "startLine": 216,
        "startChar": 8,
        "endLine": 217,
        "endChar": 26
      },
      "revId": "379b9d8e74e4b993ae6aa0c19591102c239e7901",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c1828b76_88b82fb9",
        "filename": "Android.bp",
        "patchSetId": 5
      },
      "lineNbr": 217,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-03-20T15:17:38Z",
      "side": 1,
      "message": "i have no idea what i\u0027m talking about ... i mean \"whatever builds royluo is using that he\u0027s seen this problem\" :-)",
      "parentUuid": "71f03d87_4f7e8fa7",
      "range": {
        "startLine": 216,
        "startChar": 8,
        "endLine": 217,
        "endChar": 26
      },
      "revId": "379b9d8e74e4b993ae6aa0c19591102c239e7901",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e741cef2_f4778181",
        "filename": "Android.bp",
        "patchSetId": 5
      },
      "lineNbr": 217,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2024-03-21T06:23:16Z",
      "side": 1,
      "message": "I\u0027ve read the bug again, and it appears that he\u0027s not talking about flattened APEX. It is rather this question: \"how can I debug the system if it fails to boot before adbd is ready?\". \n\nMy answer to that question is \"make adbd apex as a bootstrap apex (at least during the early bring-up stage)\".\n\nOr, they can alternatively use the first-stage console [1], if all they need is a shell access.\n\n[1] https://cs.android.com/android/platform/superproject/main/+/main:system/core/init/first_stage_console.cpp;drc\u003db6b2afb6b3679275fc2876f0832996be35b75139;l\u003d117",
      "parentUuid": "c1828b76_88b82fb9",
      "range": {
        "startLine": 216,
        "startChar": 8,
        "endLine": 217,
        "endChar": 26
      },
      "revId": "379b9d8e74e4b993ae6aa0c19591102c239e7901",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1971e4f0_a714f99d",
        "filename": "Android.bp",
        "patchSetId": 5
      },
      "lineNbr": 217,
      "author": {
        "id": 2001171
      },
      "writtenOn": "2024-03-21T06:53:10Z",
      "side": 1,
      "message": "Yes that\u0027s exactly the question I\u0027m trying to ask. In the early stage of product bringup, Android doesn\u0027t consistently boot to post-fs-data stage where apex packages are unpacked, however, we still want adb to facilitate debugging and testing. Usually this happens after first-stage console is brought up, and before successfully booting to Android home screen (a major milestone for bringup).  \n\nMaking adb a bootstrap apex sounds like a good idea, but it also requires forking a bringup branch for repo platform/system/apex. In most cases, only device/product specific repos are forked for bringup, android system and mainline module are still on main branch. This time we make a special request to fork off adb so that we can get adb working with some hack (ag/26623974). However, I\u0027d like to seek a long-term solution that works on the main branch so that a minimal change is required to enable early adb. Ideally, it could be a compile flag, a soong variable or anything that could be set in device/product-specific files (e.g. device.mk) to enable early adb. This would be extremely useful for future Pixel bringup and I believe other OEM might also find this handy.",
      "parentUuid": "e741cef2_f4778181",
      "range": {
        "startLine": 216,
        "startChar": 8,
        "endLine": 217,
        "endChar": 26
      },
      "revId": "379b9d8e74e4b993ae6aa0c19591102c239e7901",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7c31301f_79b5851b",
        "filename": "Android.bp",
        "patchSetId": 5
      },
      "lineNbr": 217,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2024-03-21T06:59:36Z",
      "side": 1,
      "message": "You could define a bootconfig which controls the membership of the adbd apex to the bootstrap apexes. For example, if the bootloader sets `androidboot.early_adbd \u003d true` or `androidboot.apex.early_apexes \u003d com.android.adbd,com.android.foo` (name TBD), then apexd follows the instruction.\n\nWith this you don\u0027t need to rebuild Android for the bring up task, and you don\u0027t need to fork Android.",
      "parentUuid": "1971e4f0_a714f99d",
      "range": {
        "startLine": 216,
        "startChar": 8,
        "endLine": 217,
        "endChar": 26
      },
      "revId": "379b9d8e74e4b993ae6aa0c19591102c239e7901",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ee3cfeaa_21c97606",
        "filename": "Android.bp",
        "patchSetId": 5
      },
      "lineNbr": 217,
      "author": {
        "id": 2001171
      },
      "writtenOn": "2024-03-21T22:29:51Z",
      "side": 1,
      "message": "Gave it a try but encountered one issue: apexd assumes bootstrap apex packages are all uncompressed. Apart from that, this seems to work. Do you know why bootstrap apex can\u0027t be compressed? Adding an extra step to decompress the package in apexd seems like a straightforward solution, but I\u0027m not sure if I miss anything.",
      "parentUuid": "7c31301f_79b5851b",
      "range": {
        "startLine": 216,
        "startChar": 8,
        "endLine": 217,
        "endChar": 26
      },
      "revId": "379b9d8e74e4b993ae6aa0c19591102c239e7901",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "04c138fc_c4937726",
        "filename": "Android.bp",
        "patchSetId": 5
      },
      "lineNbr": 217,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2024-03-22T00:35:10Z",
      "side": 1,
      "message": "Thanks for trying that!\n\nAPEX compression can be disabled at the product level. See [1]. I think it makes sense to disable it during the early bringup stage. The reason we don\u0027t (can\u0027t) support compressed apex for bootstrapping ones is because you need /data to decompress the apexes into. Sorry that I overlooked this when suggesting that. \n\nhttps://cs.android.com/android/platform/superproject/main/+/main:system/apex/docs/README.md;drc\u003d87ae5b5ff9b613878236ef825340dadbb9367c70;l\u003d575",
      "parentUuid": "ee3cfeaa_21c97606",
      "range": {
        "startLine": 216,
        "startChar": 8,
        "endLine": 217,
        "endChar": 26
      },
      "revId": "379b9d8e74e4b993ae6aa0c19591102c239e7901",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "16772e4a_fd3c4653",
        "filename": "Android.bp",
        "patchSetId": 5
      },
      "lineNbr": 218,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-03-15T18:32:27Z",
      "side": 1,
      "message": "tab",
      "revId": "379b9d8e74e4b993ae6aa0c19591102c239e7901",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6f93006a_9cb7912c",
        "filename": "Android.bp",
        "patchSetId": 5
      },
      "lineNbr": 218,
      "author": {
        "id": 2001171
      },
      "writtenOn": "2024-03-15T20:49:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "16772e4a_fd3c4653",
      "revId": "379b9d8e74e4b993ae6aa0c19591102c239e7901",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}