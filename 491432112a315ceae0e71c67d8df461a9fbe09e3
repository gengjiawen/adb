{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "c76d11da_53317aaa",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1083168
      },
      "writtenOn": "2023-01-17T19:23:28Z",
      "side": 1,
      "message": "Ideally this CL would have been broken down in two since it features a refactor and  new tests. That would have made the review easier.",
      "revId": "491432112a315ceae0e71c67d8df461a9fbe09e3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6a0f1435_b8744c37",
        "filename": "daemon/restart_service_test.cpp",
        "patchSetId": 2
      },
      "lineNbr": 2,
      "author": {
        "id": 1083168
      },
      "writtenOn": "2023-01-17T19:23:28Z",
      "side": 1,
      "message": "Here and in all other file: 2023",
      "range": {
        "startLine": 2,
        "startChar": 17,
        "endLine": 2,
        "endChar": 21
      },
      "revId": "491432112a315ceae0e71c67d8df461a9fbe09e3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2a3cecab_22995982",
        "filename": "daemon/restart_service_test.cpp",
        "patchSetId": 2
      },
      "lineNbr": 2,
      "author": {
        "id": 1579231
      },
      "writtenOn": "2023-01-17T20:57:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6a0f1435_b8744c37",
      "range": {
        "startLine": 2,
        "startChar": 17,
        "endLine": 2,
        "endChar": 21
      },
      "revId": "491432112a315ceae0e71c67d8df461a9fbe09e3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "caa64d98_5f41a6ba",
        "filename": "daemon/restart_service_test.cpp",
        "patchSetId": 2
      },
      "lineNbr": 46,
      "author": {
        "id": 1083168
      },
      "writtenOn": "2023-01-17T19:23:28Z",
      "side": 1,
      "message": "Here and all tests below:\n\n1/ Don\u0027t think we should introduce randomness in our tests, it has the potential to make them flaky.\n\n2/ `NULL` should be `nullptr`",
      "range": {
        "startLine": 46,
        "startChar": 4,
        "endLine": 46,
        "endChar": 22
      },
      "revId": "491432112a315ceae0e71c67d8df461a9fbe09e3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c33ef430_95e68c3d",
        "filename": "daemon/restart_service_test.cpp",
        "patchSetId": 2
      },
      "lineNbr": 46,
      "author": {
        "id": 1579231
      },
      "writtenOn": "2023-01-17T20:57:10Z",
      "side": 1,
      "message": "\u003e\u003e1.) Don\u0027t think we should introduce randomness in our tests, it has the potential \u003e\u003eto make them flaky.\nWhy would pseudo-random numbers make the tests *less* flaky? (if flakiness is indeed a problem?).\nWhy would true-randomness worsen flakiness?\n(please re-open if there is clear correlation).\n2.) Done",
      "parentUuid": "caa64d98_5f41a6ba",
      "range": {
        "startLine": 46,
        "startChar": 4,
        "endLine": 46,
        "endChar": 22
      },
      "revId": "491432112a315ceae0e71c67d8df461a9fbe09e3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0d91dea2_074d9b37",
        "filename": "daemon/restart_service_test.cpp",
        "patchSetId": 2
      },
      "lineNbr": 60,
      "author": {
        "id": 1083168
      },
      "writtenOn": "2023-01-17T19:23:28Z",
      "side": 1,
      "message": "Why do you run this in a `thread` instead of in the current thread?",
      "range": {
        "startLine": 60,
        "startChar": 18,
        "endLine": 60,
        "endChar": 34
      },
      "revId": "491432112a315ceae0e71c67d8df461a9fbe09e3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ac731647_a4f325e4",
        "filename": "daemon/restart_service_test.cpp",
        "patchSetId": 2
      },
      "lineNbr": 60,
      "author": {
        "id": 1579231
      },
      "writtenOn": "2023-01-17T20:57:10Z",
      "side": 1,
      "message": "Because WaitForProperty() is inherently asynchronous, AFAIU",
      "parentUuid": "0d91dea2_074d9b37",
      "range": {
        "startLine": 60,
        "startChar": 18,
        "endLine": 60,
        "endChar": 34
      },
      "revId": "491432112a315ceae0e71c67d8df461a9fbe09e3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d0dd7ed3_03d0f7d5",
        "filename": "daemon/restart_service_test.cpp",
        "patchSetId": 2
      },
      "lineNbr": 60,
      "author": {
        "id": 1083168
      },
      "writtenOn": "2023-01-17T22:32:49Z",
      "side": 1,
      "message": "1/ I am not sure what you mean by \"asynchronous\". There is no callback involved.\n2/ The test creates a thread and wait for it to finish. So there is no concurrency involved.\n\nWhy not:\n\n```\nx \u003d getProperty(\"service.adb.tcp.port\")\nassert(x)\nrestart_tcp_service(...)\nx \u003d getProperty(\"service.adb.tcp.port\")\nassert(x)\n```\n\nOr are you saying that setProp/getProp are not atomic?",
      "parentUuid": "ac731647_a4f325e4",
      "range": {
        "startLine": 60,
        "startChar": 18,
        "endLine": 60,
        "endChar": 34
      },
      "revId": "491432112a315ceae0e71c67d8df461a9fbe09e3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b7357f78_7ac428f0",
        "filename": "daemon/restart_service_test.cpp",
        "patchSetId": 2
      },
      "lineNbr": 60,
      "author": {
        "id": 1579231
      },
      "writtenOn": "2023-01-17T22:43:59Z",
      "side": 1,
      "message": "The test (as it is setup right now) demonstrates the service does not need to be blocking on the same thread. The service accomplishes the work off a separate thread. I feel it\u0027s simple enough to understand.",
      "parentUuid": "d0dd7ed3_03d0f7d5",
      "range": {
        "startLine": 60,
        "startChar": 18,
        "endLine": 60,
        "endChar": 34
      },
      "revId": "491432112a315ceae0e71c67d8df461a9fbe09e3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "51626c83_ea3257e0",
        "filename": "daemon/restart_service_test.cpp",
        "patchSetId": 2
      },
      "lineNbr": 60,
      "author": {
        "id": 1083168
      },
      "writtenOn": "2023-01-17T23:15:04Z",
      "side": 1,
      "message": "I am not sure what we get out of testing that some code can run on another thread. We are not testing parrallelism or concurrency here, since we run code on a thread, wait for the result, and check the result on another thread.\n\nIf you still want to test this, I think it should be part of an explicit test that says \"TestRunningOnOtherThread\" or something like that. But the pattern where you run `restart_tcp_service` in another thread should not be part of `RestartTcpServiceValidPortSuccess`, `RestartTcpServiceInvalidPortFailure` or `RestartUsbServiceSuccess`. There is no point testing that over and over again.",
      "parentUuid": "b7357f78_7ac428f0",
      "range": {
        "startLine": 60,
        "startChar": 18,
        "endLine": 60,
        "endChar": 34
      },
      "revId": "491432112a315ceae0e71c67d8df461a9fbe09e3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f986d75f_b42288d2",
        "filename": "daemon/restart_service_test.cpp",
        "patchSetId": 2
      },
      "lineNbr": 60,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2023-01-18T01:43:59Z",
      "side": 1,
      "message": "yeah, unless i\u0027m _also_ missing something here, i haven\u0027t understood why we need the thread bits. you know you\u0027re not on the looper thread here, which is presumably \"other thread\" enough for your purposes?",
      "parentUuid": "51626c83_ea3257e0",
      "range": {
        "startLine": 60,
        "startChar": 18,
        "endLine": 60,
        "endChar": 34
      },
      "revId": "491432112a315ceae0e71c67d8df461a9fbe09e3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5c437a3d_90e1bdcd",
        "filename": "daemon/restart_service_test.cpp",
        "patchSetId": 2
      },
      "lineNbr": 60,
      "author": {
        "id": 1579231
      },
      "writtenOn": "2023-01-18T05:22:39Z",
      "side": 1,
      "message": "As we discussed, I shall reduce this CL to a mechanical/minimal one. And follow up with a dependent one that address restart_service test coverage.",
      "parentUuid": "f986d75f_b42288d2",
      "range": {
        "startLine": 60,
        "startChar": 18,
        "endLine": 60,
        "endChar": 34
      },
      "revId": "491432112a315ceae0e71c67d8df461a9fbe09e3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ddb87a22_8b252e7d",
        "filename": "daemon/test_utils.cpp",
        "patchSetId": 2
      },
      "lineNbr": 2,
      "author": {
        "id": 1083168
      },
      "writtenOn": "2023-01-17T19:23:28Z",
      "side": 1,
      "message": "ditto",
      "range": {
        "startLine": 2,
        "startChar": 17,
        "endLine": 2,
        "endChar": 21
      },
      "revId": "491432112a315ceae0e71c67d8df461a9fbe09e3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "217649dc_19837118",
        "filename": "daemon/test_utils.cpp",
        "patchSetId": 2
      },
      "lineNbr": 2,
      "author": {
        "id": 1579231
      },
      "writtenOn": "2023-01-17T20:57:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ddb87a22_8b252e7d",
      "range": {
        "startLine": 2,
        "startChar": 17,
        "endLine": 2,
        "endChar": 21
      },
      "revId": "491432112a315ceae0e71c67d8df461a9fbe09e3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}