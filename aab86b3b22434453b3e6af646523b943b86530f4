{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "550fd6a1_33e541b9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1083168
      },
      "writtenOn": "2023-10-19T21:19:49Z",
      "side": 1,
      "message": "I am considering changing `LibusbConnection` prototype to use reference (e.g.h `Attach(std::string*)` -\u003e `Attach(std::string\u0026)` to avoid these nullptr issue.\n\nLet me know if you are ok with this approach.",
      "revId": "aab86b3b22434453b3e6af646523b943b86530f4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "46795894_9cf68f2b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1076798
      },
      "writtenOn": "2023-10-19T21:54:19Z",
      "side": 1,
      "message": "iirc google3 cpp style frowned upon non-ptr out parameters.\n\nAssuming that should remain, the proper fix would probably be to not assign to error if it\u0027s null?",
      "parentUuid": "550fd6a1_33e541b9",
      "revId": "aab86b3b22434453b3e6af646523b943b86530f4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "46320359_c0108144",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1083168
      },
      "writtenOn": "2023-10-19T22:01:35Z",
      "side": 1,
      "message": "If we must keep it as a pointer, I would rather not send `nullptr` down the pipeline. Even if we fix `LOG_ERR` to check for `nullptr` somebody may end up using the value anyway.\n\nTLDR: I would rather fix the pointer than fixe everywhere it is used. And I think the current fix is correct.",
      "parentUuid": "46795894_9cf68f2b",
      "revId": "aab86b3b22434453b3e6af646523b943b86530f4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "69dbcd30_4218df99",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2023-10-19T22:28:20Z",
      "side": 1,
      "message": "yeah, personally i find the current API confusing --- \u0026 is how you say \"it\u0027s always there\" and * is how you say \"it may be there\". taking a * but unconditionally dereferencing it is just annoying.\n\nthis is one of the google3 things i always thought was particularly stupid, but it looks like they\u0027ve fixed it (even to the extent of mentioning std::optional!):\n\"\"\"\nParameters are either inputs to the function, outputs from the function, or both. Non-optional input parameters should usually be values or const references, while non-optional output and input/output parameters should usually be references (which cannot be null). Generally, use std::optional to represent optional by-value inputs, and use a const pointer when the non-optional form would have used a reference. Use non-const pointers to represent optional outputs and optional input/output parameters.\n\"\"\"",
      "parentUuid": "46320359_c0108144",
      "revId": "aab86b3b22434453b3e6af646523b943b86530f4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7b0aba33_003c93fe",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2023-10-19T22:28:20Z",
      "side": 1,
      "message": "(this is fine for now though)",
      "revId": "aab86b3b22434453b3e6af646523b943b86530f4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "57a34682_ea6cc0de",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2023-10-19T22:30:03Z",
      "side": 1,
      "message": "oh, and for the specific question of \"which should it be here?\" --- although i have sympathy with \"sometimes callers don\u0027t need the detail of an error\", in this _specific_ case there\u0027s exactly this one caller :-) (i\u0027m amazed this hasn\u0027t caused more trouble in the past!)",
      "parentUuid": "69dbcd30_4218df99",
      "revId": "aab86b3b22434453b3e6af646523b943b86530f4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}