{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "3822189e_06735fe3",
        "filename": "daemon/jdwp_service.cpp",
        "patchSetId": 4
      },
      "lineNbr": 467,
      "author": {
        "id": 1415318
      },
      "writtenOn": "2023-06-02T20:07:51Z",
      "side": 0,
      "message": "now we know that memset should not be used with non POD data structures.\n\nI see that there are a number memset usages across adb codebase. \nAlthough they might not trigger an immediate failure, but we should just rely on a default constructor for non-POD and maybe even POD types.\n\nSo I propose to revisit other memset cases and fix if needed.\nThere are 2 fix options:\n *. add the following type assert right before memset is performed:\n      static_assert(std::is_standard_layout\u003cstructT\u003e::value);\n      \n *. use in-place default constructor: new(ptr) structT;\n \n \n For example block struct in http://cs/h/googleplex-android/platform/superproject/+/master:packages/modules/adb/types_test.cpp?l\u003d33 contains unique_ptr that should be initialised via constructor and not memeset. We have to fix it as well.",
      "range": {
        "startLine": 467,
        "startChar": 4,
        "endLine": 467,
        "endChar": 10
      },
      "revId": "9b245322078ef917bcbb7d5194f6333d388f01ef",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7e1603e3_495e1222",
        "filename": "daemon/jdwp_service.cpp",
        "patchSetId": 4
      },
      "lineNbr": 467,
      "author": {
        "id": 1579231
      },
      "writtenOn": "2023-06-02T21:24:36Z",
      "side": 0,
      "message": "Great point (I already looked for similar instances and fortunately didn\u0027t find any other fragility - yet :) \nOur particular case has to do with a combination of 1.) a memset() (it can be any other operations such as memcmp(), memcpy(), etc) that relies on a (flawed) offset computation PLUS 2.) the existence of a (non-virtual) struct (which happens to afford C++ default construction that correctly handles POD types) hierarchy.\nIn the case of other memset() usages (at least, the ones I looked over so far), the usage is safe IMO.\nThat said, I like your input about some sort of compile-time asserts - currently I have some vague ideas about adding a test module that can run on-device (e.g adbd_test) and will establish some ground truths based on the arch (getprop ro.product.cpu.abi) and POD type - pl stay tuned for a followup CL.",
      "parentUuid": "3822189e_06735fe3",
      "range": {
        "startLine": 467,
        "startChar": 4,
        "endLine": 467,
        "endChar": 10
      },
      "revId": "9b245322078ef917bcbb7d5194f6333d388f01ef",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "51e4598b_da00d345",
        "filename": "daemon/jdwp_service.cpp",
        "patchSetId": 4
      },
      "lineNbr": 467,
      "author": {
        "id": 1978766
      },
      "writtenOn": "2023-06-02T21:26:06Z",
      "side": 0,
      "message": "\u003e static_assert(std::is_standard_layout\u003cstructT\u003e::value);\n\nYeah we should probably add this to all structs that is using memset.\n\nIf we want to make sure that the object is initialized properly, maybe we can define custom constructors for these? Even C99 has a designated initializer(https://gcc.gnu.org/onlinedocs/gcc/Designated-Inits.html) so there is no need to have memset anymore.",
      "parentUuid": "3822189e_06735fe3",
      "range": {
        "startLine": 467,
        "startChar": 4,
        "endLine": 467,
        "endChar": 10
      },
      "revId": "9b245322078ef917bcbb7d5194f6333d388f01ef",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "659a2b32_1e43eca8",
        "filename": "daemon/jdwp_service.cpp",
        "patchSetId": 4
      },
      "lineNbr": 467,
      "author": {
        "id": 1415318
      },
      "writtenOn": "2023-06-02T21:40:56Z",
      "side": 0,
      "message": "This is the place you want to replace memset with something else: http://cs/h/googleplex-android/platform/superproject/+/master:packages/modules/adb/types_test.cpp?l\u003d33",
      "parentUuid": "51e4598b_da00d345",
      "range": {
        "startLine": 467,
        "startChar": 4,
        "endLine": 467,
        "endChar": 10
      },
      "revId": "9b245322078ef917bcbb7d5194f6333d388f01ef",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2e436231_a19bba0f",
        "filename": "daemon/jdwp_service.cpp",
        "patchSetId": 4
      },
      "lineNbr": 467,
      "author": {
        "id": 1579231
      },
      "writtenOn": "2023-06-02T22:00:21Z",
      "side": 0,
      "message": "Here, we\u0027re explicitly filling in that memory address with a pattern of specified characters - no? (https://source.corp.google.com/h/googleplex-android/platform/superproject/+/master:packages/modules/adb/types_test.cpp;l\u003d59)\n\nBTW, both is_standard_layout\u003c\u003e as well as is_pod\u003c\u003e do not apply (will sync up offline about how best to validate at compile-time.",
      "parentUuid": "659a2b32_1e43eca8",
      "range": {
        "startLine": 467,
        "startChar": 4,
        "endLine": 467,
        "endChar": 10
      },
      "revId": "9b245322078ef917bcbb7d5194f6333d388f01ef",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "99e45c12_a7c877b6",
        "filename": "daemon/jdwp_service.cpp",
        "patchSetId": 4
      },
      "lineNbr": 467,
      "author": {
        "id": 1415318
      },
      "writtenOn": "2023-06-02T22:03:03Z",
      "side": 0,
      "message": "You are correct. And it\u0027s the test. did not notice.",
      "parentUuid": "659a2b32_1e43eca8",
      "range": {
        "startLine": 467,
        "startChar": 4,
        "endLine": 467,
        "endChar": 10
      },
      "revId": "9b245322078ef917bcbb7d5194f6333d388f01ef",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}